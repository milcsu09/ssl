
$ = f -> x -> f x;
. = f -> g -> x -> f (g x);

otherwise = 1;

head = xs ->
  | xs == []  ? error "head xs :: xs = []"
  | otherwise ? __head xs;

tail = xs ->
  | xs == []  ? error "tail xs :: xs = []"
  | otherwise ? __tail xs;

length = xs ->
  | xs == []  ? 0
  | otherwise ? 1 + (length $ tail xs);

sum = xs ->
  | xs == []  ? 0
  | otherwise ? head xs + sum (tail xs);

filter = f -> xs ->
  | xs == []    ? []
  | f (head xs) ? (head xs) >> filter f (tail xs)
  | otherwise   ? filter f (tail xs);

odd = n -> n % 2 == 1;

sumOddSquares = sum . map (x -> x * x) . filter odd;

printl $ sumOddSquares $ range 10;

